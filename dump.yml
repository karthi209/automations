#!/bin/bash

RELEASES=$(curl -s -H "Authorization: Bearer xxx" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/devsecops/agent_build/releases")

# Extract latest pre-release
LATEST_PRERELEASE=$(echo "$RELEASES" | jq -r '[.[] | select(.prerelease == true)] | sort_by(.published_at) | reverse | .[0].tag_name')
echo "Latest Pre-release: $LATEST_PRERELEASE"

# Extract latest official release
LATEST_RELEASE=$(echo "$RELEASES" | jq -r '[.[] | select(.prerelease == false and .draft == false)] | sort_by(.published_at) | reverse | .[0].tag_name')
echo "Latest Official Release: $LATEST_RELEASE"

# If no latest release is found, use pre-release (fallback)
if [ "$LATEST_RELEASE" == "null" ] || [ -z "$LATEST_RELEASE" ]; then
  echo "No official release found. Using pre-release: $LATEST_PRERELEASE"
  FINAL_VERSION="$LATEST_PRERELEASE"
  echo "FINAL_VERSION=$FINAL_VERSION"
  exit 0
fi

# If no pre-release is found, use latest release
if [ "$LATEST_PRERELEASE" == "null" ] || [ -z "$LATEST_PRERELEASE" ]; then
  echo "No pre-release found. Using latest official release: $LATEST_RELEASE"
  FINAL_VERSION="$LATEST_RELEASE"
  echo "FINAL_VERSION=$FINAL_VERSION"
  exit 0
fi

# Compare versions (assuming semantic versioning)
if printf '%s\n%s\n' "$LATEST_PRERELEASE" "$LATEST_RELEASE" | sort -V | tail -n 1 | grep -q "$LATEST_PRERELEASE"; then
  echo "Using pre-release: $LATEST_PRERELEASE (newer than $LATEST_RELEASE)"
  FINAL_VERSION="$LATEST_PRERELEASE"
else
  echo "Using official release: $LATEST_RELEASE (newer or equal to $LATEST_PRERELEASE)"
  FINAL_VERSION="$LATEST_RELEASE"
fi

# Extract previous version without the last identifier (e.g., 1.2.3-rc1 -> 1.2.3)
PREVIOUS_TAG=$(echo "$FINAL_VERSION" | awk -F'-' '{print $1}')
echo "PREVIOUS_TAG=$PREVIOUS_TAG"
