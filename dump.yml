name: Trigger test jobs

on:
  workflow_dispatch:

jobs:
  trigger-downstream:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: gha-aks-uc3-java
            url: https://github.kp.org/api/v3/repos/CSG/gha-aks-uc3-java/actions
            workflow_path: .github/workflows/aks.yml
          # ➕ Add more jobs by adding more entries here

    steps:
      - name: Trigger ${{ matrix.name }} workflow
        id: trigger
        run: |
          echo "Storing trigger time..."
          echo "trigger_time=$(date --utc +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "Triggering ${{ matrix.name }} workflow..."
          curl -s -X POST ${{ matrix.url }}/workflows/$(basename ${{ matrix.workflow_path }})/dispatches \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.DISPATCH_TOKEN }}" \
            -d '{
              "ref":"release/dynamic_runners",
              "inputs": {
                "operation": "build",
                "runner-label": "latest"
              }
            }'
          echo "Triggered workflow. Waiting a bit for it to register..."
          sleep 30
      - name: Find ${{ matrix.name }} workflow run
        id: find_run
        run: |
          echo "Fetching workflow ID for ${{ matrix.name }}"
          WORKFLOW_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.DISPATCH_TOKEN }}" \
            ${{ matrix.url }}/workflows \
            | jq -r --arg path "${{ matrix.workflow_path }}" '.workflows[] | select(.path == $path) | .id')
          echo "Workflow ID: $WORKFLOW_ID"
          echo "Looking for the triggered run..."
          for i in {1..12}; do
            RUN=$(curl -s -H "Authorization: Bearer ${{ secrets.DISPATCH_TOKEN }}" \
              "${{ matrix.url }}/workflows/$WORKFLOW_ID/runs?branch=release/dynamic_runners&event=workflow_dispatch" \
              | jq -r --arg ts "${{ steps.trigger.outputs.trigger_time }}" '
                .workflow_runs
                | map(select(.created_at > $ts))
                | sort_by(.created_at)
                | reverse
                | .[0]')
            RUN_ID=$(echo "$RUN" | jq -r '.id // empty')
            STATUS=$(echo "$RUN" | jq -r '.status // empty')
            if [[ -n "$RUN_ID" ]]; then
              echo "Found run: $RUN_ID with status: $STATUS"
              echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
              break
            fi
            echo "Not found yet. Retrying in 30s..."
            sleep 30
          done
          if [[ -z "$RUN_ID" ]]; then
            echo "❌ Failed to find the triggered workflow run"
            exit 1
          fi
      - name: Wait for ${{ matrix.name }} workflow to complete
        id: wait
        run: |
          run_id=${{ steps.find_run.outputs.run_id }}
          echo "Waiting for run $run_id to complete..."
          for i in {1..60}; do
            RESP=$(curl -s -H "Authorization: Bearer ${{ secrets.DISPATCH_TOKEN }}" \
              "${{ matrix.url }}/runs/$run_id")
            STATUS=$(echo "$RESP" | jq -r '.status')
            CONCLUSION=$(echo "$RESP" | jq -r '.conclusion')
            echo "Status: $STATUS | Conclusion: $CONCLUSION"
            if [[ "$STATUS" == "completed" ]]; then
              echo "conclusion=$CONCLUSION" >> $GITHUB_OUTPUT
              break
            fi
            sleep 10
          done
          if [[ "$STATUS" != "completed" ]]; then
            echo "❌ Timed out waiting for workflow to complete"
            exit 1
          fi
      - name: Report result for ${{ matrix.name }}
        run: |
          conclusion="${{ steps.wait.outputs.conclusion }}"
          if [[ "$conclusion" == "success" ]]; then
            echo "✅ ${{ matrix.name }} workflow succeeded." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ${{ matrix.name }} workflow failed: $conclusion" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
