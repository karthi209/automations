name: Submodule Changelog

on:
  workflow_dispatch:
    inputs:
      old_tag:
        description: 'Old Tag (e.g., v1.0.0)'
        required: true
      new_tag:
        description: 'New Tag (e.g., v1.1.0)'
        required: true

jobs:
  compare-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags
          submodules: true  # Ensure we get submodules

      - name: Generate Submodule Changelog
        run: |
          OLD_TAG=${{ github.event.inputs.old_tag }}
          NEW_TAG=${{ github.event.inputs.new_tag }}
          MAIN_REPO="https://github.com/devsecops/agent_build"
          CHANGELOG_FILE="submodule_changelog.md"

          echo "# Submodule Changelog" > $CHANGELOG_FILE
          echo "Comparing **$OLD_TAG** → **$NEW_TAG**" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE

          echo "## Main Repository Changes" >> $CHANGELOG_FILE
          echo "[$OLD_TAG...$NEW_TAG]($MAIN_REPO/compare/$OLD_TAG...$NEW_TAG)" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE

          git config --file .gitmodules --get-regexp path | awk '{print $2}' > submodules_list.txt

          SUBMODULES_CHANGED=0

          while IFS= read -r SUBMODULE_PATH; do
              OLD_COMMIT=$(git ls-tree "$OLD_TAG" -- "$SUBMODULE_PATH" 2>/dev/null | awk '{print $3}')
              NEW_COMMIT=$(git rev-parse HEAD:"$SUBMODULE_PATH")

              echo "DEBUG: OLD_COMMIT for $SUBMODULE_PATH: $OLD_COMMIT"
              echo "DEBUG: NEW_COMMIT for $SUBMODULE_PATH: $NEW_COMMIT"

              # Skip submodules if they are unchanged
              if [ "$OLD_COMMIT" == "$NEW_COMMIT" ]; then
                  echo "Skipping $SUBMODULE_PATH - No changes"
                  continue
              fi

              echo "### $SUBMODULE_PATH" >> $CHANGELOG_FILE
              
              if [ -z "$OLD_COMMIT" ]; then
                  echo "**⚠️ Skipping:** Not present in $OLD_TAG" >> $CHANGELOG_FILE
              else
                  if ! git rev-parse "$OLD_COMMIT" >/dev/null 2>&1; then
                      echo "**⚠️ Error:** OLD_COMMIT ($OLD_COMMIT) not found locally. Try 'git fetch --recurse-submodules'." >> $CHANGELOG_FILE
                  else
                      # Extract submodule repo name
                      SUBMODULE_NAME=$(basename "$SUBMODULE_PATH")

                      # Construct submodule repo URL
                      SUBMODULE_REPO="https://github.com/devsecops/$SUBMODULE_NAME"

                      echo "[Compare Changes]($SUBMODULE_REPO/compare/$OLD_COMMIT...$NEW_COMMIT)" >> $CHANGELOG_FILE
                      SUBMODULES_CHANGED=1
                  fi
              fi
              echo "" >> $CHANGELOG_FILE
          done < submodules_list.txt

          rm -f submodules_list.txt

          if [ "$SUBMODULES_CHANGED" -eq 0 ]; then
              echo "No submodule changes detected. Skipping changelog upload."
              rm -f $CHANGELOG_FILE
          fi

      - name: Upload Changelog as Artifact
        if: success() && hashFiles('submodule_changelog.md') != ''
        uses: actions/upload-artifact@v3
        with:
          name: submodule-changelog
          path: submodule_changelog.md
