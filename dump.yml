import json
import sys
import re
from deepdiff import DeepDiff

def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def extract_version_from_filename(file_path):
    match = re.search(r'(\d+)_(\d+)_(\d+)\.json$', file_path)
    return f"{match.group(1)}.{match.group(2)}.{match.group(3)}" if match else "unknown"

def clean_key_path(path):
    """Extracts key name from DeepDiff path notation."""
    return path.replace("root['", "").replace("']", "")

def compare_versions(prod_data, latest_data):
    changes = DeepDiff(prod_data, latest_data, ignore_order=True, view="tree")
    changes_list = []

    # Handle key-value changes
    for path, change in changes.get("values_changed", {}).items():
        key = clean_key_path(path)
        old_value = change['old_value']
        new_value = change['new_value']
        changes_list.append(f"{key}:\n  - Old: {old_value}\n  - New: {new_value}\n")

    # Handle added and removed keys
    for path in changes.get("dictionary_item_added", {}):
        key = clean_key_path(path)
        changes_list.append(f"Added: {key}\n  - New: {latest_data.get(key)}\n")

    for path in changes.get("dictionary_item_removed", {}):
        key = clean_key_path(path)
        changes_list.append(f"Removed: {key}\n  - Old: {prod_data.get(key)}\n")

    return "\n".join(changes_list)

def generate_report(prod_file, latest_file, output_file):
    prod_data = load_json(prod_file)
    latest_data = load_json(latest_file)
    
    prod_version = extract_version_from_filename(prod_file)
    latest_version = extract_version_from_filename(latest_file)
    
    version_diff = compare_versions(prod_data, latest_data)
    
    report = f"""
## What changed between {prod_version} (prod) and {latest_version} (latest)

```bash
image version: {prod_version} >> {latest_version}

*********** Changes *********************

{version_diff}

*********** End of Changes *********************
```

## {latest_version} Full Image State (latest)
```json
{json.dumps(latest_data, indent=4)}
```

"""
    
    with open(output_file, 'w') as file:
        file.write(report)
    
    print(f"Report generated and saved to {output_file}")

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python compare_reports.py <prod_json> <latest_json> <output_md>")
        sys.exit(1)
    
    prod_json = sys.argv[1]
    latest_json = sys.argv[2]
    output_md = sys.argv[3]
    
    generate_report(prod_json, latest_json, output_md)
