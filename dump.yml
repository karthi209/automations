import json
import subprocess
import re

# Path to the JSON file
json_file = "/path/to/your.json"  # Update this with the actual JSON file path

# Load JSON data
try:
    with open(json_file, "r") as f:
        data = json.load(f)
except FileNotFoundError:
    print("\033[91m‚ùå Error: JSON file not found at {}\033[0m".format(json_file))  # Red text
    exit(1)
except json.JSONDecodeError:
    print("\033[91m‚ùå Error: Invalid JSON format in {}\033[0m".format(json_file))  # Red text
    exit(1)

# Header
print("\n\033[96müõ†  Java Versions\033[0m")  # Cyan bold title
print("=" * 50)

# Iterate over each command in JSON
for package, info in data.items():
    cmd = info.get("command", "")

    if not cmd:
        print(f"\033[93m{package:<15} ‚ö† No command found\033[0m")  # Yellow warning
        continue

    try:
        # Execute command and capture output
        result = subprocess.run(cmd, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = result.stdout.strip()

        # Special formatting for "java_list"
        if package == "java_list":
            java_versions = output.split("\n")
            seen = set()  # Track seen entries to remove duplicates

            print(f"\033[94m{package:<15}\033[92m")  # Blue tool name

            index = 1
            for line in java_versions:
                match = re.match(r"(.+?)\s+auto\s+(.+)", line)
                if match:
                    java_name, java_path = match.groups()

                    # Keep if it's "java" OR does NOT contain "_openjdk"
                    if java_name == "java" or "_openjdk" not in java_name:
                        if java_name not in seen:
                            seen.add(java_name)
                            print(f"  {index}. {java_name} -> {java_path}")
                            index += 1

            print("\033[0m", end="")  # Reset color
            continue  # Skip default printing below

    except subprocess.CalledProcessError:
        output = "\033[91m‚ùå Failed\033[0m"  # Red failure

    # Print results in a structured way
    print(f"\033[94m{package:<15} \033[92m{output}\033[0m")  # Blue tool, Green version

# Final message
print("=" * 50)
print("\033[92m‚úÖ Check completed.\033[0m\n")  # Green success message
