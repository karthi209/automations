name: agent-build

on:
  workflow_dispatch:
    inputs:
      BUILD_BASE:
        description: "Build base image during the build"
        required: false
        default: false
        type: boolean
      BUILD_AGENT:
        description: "Build agent image during the build"
        required: false
        default: false
        type: boolean
      BUILD_TOOLS:
        description: "Build tools image during the build"
        required: false
        default: true
        type: boolean
      UNIT_TEST:
        description: "Run unit tests"
        required: true
        default: true
        type: boolean
      INTEGRATION_TEST:
        description: "Run integration tests"
        required: true
        default: true
        type: boolean
      IMAGE_REPORT:
        description: "Generate image report"
        required: true
        default: true
        type: boolean
      CREATE_RELEASE:
        description: "Create draft release notes"
        required: true
        default: true
        type: boolean

jobs:
  unit-test:
    if: ${{ inputs.UNIT_TEST }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        repo: [ 'git', 'nodejs', 'ansible_client' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Run unit tests
        run: echo "Running unit tests for ${{ matrix.repo }}"

  unit-test-dashboard:
    runs-on: self-hosted
    needs: unit-test
    if: ${{ needs.unit-test.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dashboard updates
        run: echo "Updating unit test dashboard"

  build-base-image:
    if: ${{ inputs.BUILD_BASE && (inputs.UNIT_TEST == false || needs.unit-test-dashboard.result == 'success') }}
    needs: unit-test-dashboard
    strategy:
      matrix:
        AGENT_TYPE: [ jenkins ]
    runs-on: self-hosted
    outputs:
      IMAGE_TAG_BASE: ${{ steps.image_tag_out.outputs.imagetag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Build base image
        run: echo "Building base image for ${{ matrix.AGENT_TYPE }}"

  bump-base-images-in-git:
    needs: build-base-image
    if: ${{ needs.build-base-image.result == 'success' }}
    runs-on: self-hosted
    outputs:
      BUMPED_SHA_BASE: ${{ steps.bumped_sha_base_out.outputs.bumpedshabase }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump base images in Git
        run: echo "Bumping base images in Git"

  build-agent-images:
    needs: bump-base-images-in-git
    if: ${{ inputs.BUILD_AGENT && (inputs.BUILD_BASE == false || needs.bump-base-images-in-git.result == 'success') }}
    strategy:
      matrix:
        AGENT_TYPE: [ jenkins, scale-set-runner ]
    runs-on: self-hosted
    outputs:
      IMAGE_TAG_AGENT: ${{ steps.image_tag_out.outputs.imagetag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build agent images
        run: echo "Building agent image for ${{ matrix.AGENT_TYPE }}"

  bump-agent-images-in-git:
    needs: build-agent-images
    if: ${{ needs.build-agent-images.result == 'success' }}
    runs-on: self-hosted
    outputs:
      BUMPED_SHA_AGENT: ${{ steps.bumped_sha_agent_out.outputs.bumpedshaagent }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump agent images in Git
        run: echo "Bumping agent images in Git"

  build-tools-images:
    needs: bump-agent-images-in-git
    if: ${{ inputs.BUILD_TOOLS && (inputs.BUILD_AGENT == false || needs.bump-agent-images-in-git.result == 'success') }}
    strategy:
      matrix:
        AGENT_TYPE: [ jenkins, scale-set-runner ]
        AGENT_TEAM: [ bluemix ]
    runs-on: self-hosted
    outputs:
      IMAGE_TAG_TOOLS: ${{ steps.image_tag_out.outputs.imagetag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build tools images
        run: echo "Building tools images for ${{ matrix.AGENT_TEAM }}"

  build-team-images:
    needs: build-tools-images
    if: ${{ needs.build-tools-images.result == 'success' }}
    strategy:
      matrix:
        AGENT_TYPE: [ jenkins, scale-set-runner ]
        AGENT_TEAM: [ ads, fotf, fotf-sandbox ]
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build team images
        run: echo "Building team images for ${{ matrix.AGENT_TEAM }}"

  bump-all-tools-teams-images-in-git:
    needs: [ build-team-images, build-tools-images ]
    if: ${{ needs.build-team-images.result == 'success' && needs.build-tools-images.result == 'success' }}
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump all tools and team images in Git
        run: echo "Bumping all tools and team images in Git"

  integration-test-existing-image:
    runs-on: self-hosted
    needs: bump-all-tools-teams-images-in-git
    if: ${{ inputs.INTEGRATION_TEST && needs.bump-all-tools-teams-images-in-git.result == 'success' }}
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run integration tests
        run: echo "Running integration tests"

  integration-test-existing-image-dashboard:
    runs-on: self-hosted
    needs: integration-test-existing-image
    if: ${{ needs.integration-test-existing-image.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update integration test dashboard
        run: echo "Updating integration test dashboard"

  create-report:
    runs-on: self-hosted
    needs: integration-test-existing-image-dashboard
    if: ${{ inputs.IMAGE_REPORT && needs.integration-test-existing-image-dashboard.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Generate image report
        run: echo "Generating image report"

  create-release:
    runs-on: self-hosted
    needs: [ integration-test-existing-image-dashboard, unit-test-dashboard ]
    if: ${{ inputs.CREATE_RELEASE && needs.integration-test-existing-image-dashboard.result == 'success' && needs.unit-test-dashboard.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Create draft release notes
        run: echo "Creating draft release notes in GitHub"
