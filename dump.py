import subprocess
import sys
import time
import json
import os

def get_test_files(test_folder):
    # Discover all Python test files in the test folder
    test_files = {}
    for file_name in os.listdir(test_folder):
        if file_name.endswith(".py"):
            test_files[file_name] = f"/test_tools/{file_name}"
    return test_files

def run_docker_container(image_name, test_folder):
    container_name = f"test-container-{int(time.time())}"
    
    try:
        # Pull the Docker image (if not already pulled)
        print(f"Pulling Docker image {image_name}...")
        subprocess.check_call(["docker", "pull", image_name])

        # Run the container
        print(f"Starting container {container_name}...")
        subprocess.check_call([
            "docker", "run", "-d", "--name", container_name, image_name, "tail", "-f", "/dev/null"
        ])
        
        # Get the test files dynamically from the folder
        test_files = get_test_files(test_folder)
        
        # Copy test files to the container
        print("Copying test files to the container...")
        for src, dest in test_files.items():
            subprocess.check_call(["docker", "cp", os.path.join(test_folder, src), f"{container_name}:{dest}"])

        # Run the test scripts inside the container
        print("Running tests inside the container...")
        subprocess.check_call([
            "docker", "exec", container_name, "pytest", "--json-report", "--json-report-file=result.json", "/test_tools"
        ])

        print("Test completed.")
        
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
    finally:
        # Stop and remove the container
        print(f"Stopping and removing container {container_name}...")
        subprocess.check_call(["docker", "stop", container_name])
        subprocess.check_call(["docker", "rm", container_name])


if __name__ == "__main__":
    image_name = sys.argv[1]  # Docker image name
    test_folder = "test_tools"  # Folder with the test files
    run_docker_container(image_name, test_folder)








import json

def generate_markdown_table(test_summary):
    table = "| Tool Name | Version | Test Results | Status |\n"
    table += "|-----------|---------|--------------|--------|\n"
    
    for tool, details in test_summary.items():
        test_results = f"{details['tests_passed']}/{details['tests_run']}"
        status = "✔" if details['status'] == "pass" else "❌"
        table += f"| {tool} | {details['version']} | {test_results} | {status} |\n"
    
    return table


def generate_summary():
    # Read the summary from the JSON file generated by pytest
    with open("result.json", "r") as f:
        data = json.load(f)

    # Initialize summary dictionary
    summary = {}

    for test in data["tests"]:
        tool_name = test["name"]
        version = test.get("stdout", "N/A")
        status = "pass" if test["status"] == "passed" else "fail"
        
        if tool_name not in summary:
            summary[tool_name] = {
                "version": version,
                "tests_run": 0,
                "tests_passed": 0,
                "status": status
            }

        summary[tool_name]["tests_run"] += 1
        if status == "pass":
            summary[tool_name]["tests_passed"] += 1

    return summary


if __name__ == "__main__":
    # Generate the test summary
    test_summary = generate_summary()

    # Convert to markdown
    markdown_table = generate_markdown_table(test_summary)

    # Output the markdown table (you can save it to a file)
    with open("test_summary.md", "w") as f:
        f.write(markdown_table)

    # Print markdown for GitHub summary
    print(markdown_table)

