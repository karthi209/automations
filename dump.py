import json

def read_version_from_file(file_path):
    """Read version information from a file."""
    try:
        with open(file_path, 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        return "Version info not found"

def generate_markdown_summary(json_report_path):
    # Read the JSON report generated by pytest
    with open(json_report_path, 'r') as file:
        report = json.load(file)
    
    # Initialize the markdown content
    markdown_content = "# Test Report Summary\n\n"
    markdown_content += "| Tool Name | Version | Test Results | Health |\n"
    markdown_content += "|-----------|---------|--------------|--------|\n"

    # Iterate over each test result in the report
    for entry in report.get('tests', []):
        tool_name = entry.get('name', 'Unknown Tool')
        
        # Read the version from the file generated during the test
        version_file_path = f"/tmp/{tool_name}_version.txt"  # Customize the path as needed
        version = read_version_from_file(version_file_path)

        total_tests = len(entry.get('tests', []))
        passed_tests = sum(1 for test in entry.get('tests', []) if test.get('outcome') == 'passed')
        
        # Calculate the health (green check for full pass, red cross for failure)
        health = ":green_check:" if passed_tests == total_tests else ":x:"
        
        # Generate a row for each tool
        markdown_content += f"| {tool_name} | {version} | {passed_tests}/{total_tests} tests passed | {health} |\n"
    
    return markdown_content

if __name__ == "__main__":
    json_report_path = "./test_report.json"  # Path to the JSON report
    markdown_summary = generate_markdown_summary(json_report_path)
    
    # Print or write the markdown content to a file
    print(markdown_summary)
    with open("test_report_summary.md", "w") as md_file:
        md_file.write(markdown_summary)
